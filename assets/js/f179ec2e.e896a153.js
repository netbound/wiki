"use strict";(self.webpackChunkalexandria=self.webpackChunkalexandria||[]).push([[849],{6490:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],l={},s="Exteded Berkeley Packet Filter (eBPF)",p={unversionedId:"networking/ebpf",id:"networking/ebpf",isDocsHomePage:!1,title:"Exteded Berkeley Packet Filter (eBPF)",description:"Loading BPF Programs",source:"@site/docs/networking/ebpf.md",sourceDirName:"networking",slug:"/networking/ebpf",permalink:"/docs/networking/ebpf",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/networking/ebpf.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Performance",permalink:"/docs/go/go-performance"},next:{title:"Setting up Wireguard on an EdgeRouter 4",permalink:"/docs/networking/wireguard-er"}},u=[{value:"Loading BPF Programs",id:"loading-bpf-programs",children:[]},{value:"eBPF Programs",id:"ebpf-programs",children:[]},{value:"eBPF Maps",id:"ebpf-maps",children:[]},{value:"Traffic Control Programs",id:"traffic-control-programs",children:[]},{value:"Sources",id:"sources",children:[{value:"Performance",id:"performance",children:[]},{value:"Fundamentals",id:"fundamentals",children:[]},{value:"Guides",id:"guides",children:[]},{value:"Examples",id:"examples",children:[]}]}],c={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exteded-berkeley-packet-filter-ebpf"},"Exteded Berkeley Packet Filter (eBPF)"),(0,i.kt)("h2",{id:"loading-bpf-programs"},"Loading BPF Programs"),(0,i.kt)("p",null,"Loading eBPF programs happens through the ",(0,i.kt)("inlineCode",{parentName:"p"},"bpf")," syscall:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int bpf(int cmd, union bpf_attr *attr, unsigned int size);\n")),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"cmd")," is BPF_PROG_LOAD, the bytecode program (stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"attr"),") will be\nverified, JIT compiled and loaded into the kernel. With BPF_PROG_LOAD, this is the ",(0,i.kt)("inlineCode",{parentName:"p"},"attr")," struct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"struct {\n    __u32         prog_type;\n    __u32         insn_cnt;\n    __aligned_u64 insns;      /* 'const struct bpf_insn *' */\n    __aligned_u64 license;    /* 'const char *' */\n    __u32         log_level;  /* verbosity level of verifier */\n    __u32         log_size;   /* size of user buffer */\n    __aligned_u64 log_buf;    /* user supplied 'char *buffer' */\n    __u32         kern_version; /* checked when prog_type=kprobe (since Linux 4.1) */\n};\n")),(0,i.kt)("h2",{id:"ebpf-programs"},"eBPF Programs"),(0,i.kt)("p",null,"eBPF programs are are always of a certain type. This type defines the context they can work with, which is provided\nas the program input. For example, a networking program will receive the kernel representation of a packet as its input\n(",(0,i.kt)("inlineCode",{parentName:"p"},"__sk_buff *skb"),");"),(0,i.kt)("p",null,"The current set of eBPF program types supported by the kernel are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_SOCKET_FILTER: a network packet filter"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_KPROBE: determine whether a kprobe should fire or not"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_SCHED_CLS: a network traffic-control classifier"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_SCHED_ACT: a network traffic-control action"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_TRACEPOINT: determine whether a tracepoint should fire or not"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_XDP: a network packet filter run from the device-driver receive path"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_PERF_EVENT: determine whether a perf event handler should fire or not"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_CGROUP_SKB: a network packet filter for control groups"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_CGROUP_SOCK: a network packet filter for control groups that is allowed to modify socket options"),(0,i.kt)("li",{parentName:"ul"},"BPF",(0,i.kt)("em",{parentName:"li"},"PROG_TYPE_LWT"),"*: a network packet filter for lightweight tunnels"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_SOCK_OPS: a program for setting socket parameters"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_TYPE_SK_SKB: a network packet filter for forwarding packets between sockets"),(0,i.kt)("li",{parentName:"ul"},"BPF_PROG_CGROUP_DEVICE: determine if a device operation should be permitted or not")),(0,i.kt)("h2",{id:"ebpf-maps"},"eBPF Maps"),(0,i.kt)("p",null,"eBPF maps are efficient key-value pairs that are stored in kernel memory. They can be shared with user-space\nthrough file descriptors, allowing data to be shared between the kernel BPF program and a user-space application.\nSharing a map can be done through pinning it, a process that attaches an object to a BPF file system (",(0,i.kt)("inlineCode",{parentName:"p"},"/sys/fs/bpf"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_HASH: a hash table"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_ARRAY: an array map, optimized for fast lookup speeds, often used for counters"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_PROG_ARRAY: an array of file descriptors corresponding to eBPF programs; used to implement jump tables and sub-programs to handle specific packet protocols"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_PERCPU_ARRAY: a per-CPU array, used to implement histograms of latency"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_PERF_EVENT_ARRAY: stores pointers to struct perf_event, used to read and store perf event counters"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_CGROUP_ARRAY: stores pointers to control groups"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_PERCPU_HASH: a per-CPU hash table"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_LRU_HASH: a hash table that only retains the most recently used items"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_LRU_PERCPU_HASH: a per-CPU hash table that only retains the most recently used items"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_LPM_TRIE: a longest-prefix match trie, good for matching IP addresses to a range"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_STACK_TRACE: stores stack traces"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_ARRAY_OF_MAPS: a map-in-map data structure"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_HASH_OF_MAPS: a map-in-map data structure"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_DEVICE_MAP: for storing and looking up network device references"),(0,i.kt)("li",{parentName:"ul"},"BPF_MAP_TYPE_SOCKET_MAP: stores and looks up sockets and allows socket redirection with BPF helper functions")),(0,i.kt)("h2",{id:"traffic-control-programs"},"Traffic Control Programs"),(0,i.kt)("h2",{id:"sources"},"Sources"),(0,i.kt)("h3",{id:"performance"},"Performance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.net.in.tum.de/fileadmin/bibtex/publications/papers/ITC30-Packet-Filtering-eBPF-XDP.pdf"},"Performance Implications of Packet Filtering with Linux eBPF [PDF]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://kukuruku.co/post/capturing-packets-in-linux-at-a-speed-of-millions-of-packets-per-second-without-using-third-party-libraries/"},"Capturing Millions of Packets Per Second [Article]"))),(0,i.kt)("h3",{id:"fundamentals"},"Fundamentals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.cilium.io/en/latest/bpf/"},"BPF and XDP Reference Guide - Cilium [Docs]"))),(0,i.kt)("h3",{id:"guides"},"Guides"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://lwn.net/Articles/740157/"},"A thorough introduction to eBPF [Article]"))),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/torvalds/linux/tree/master/samples/bpf"},"eBPF samples in the Linux kernel")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/iovisor/bcc/tree/master/libbpf-tools"},"BCC tools"))))}d.isMDXComponent=!0}}]);